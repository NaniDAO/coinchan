export const truncAddress = (address: string): string => {
  if (!address) return "";
  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
};

export const contractsNameMap: Record<string, string> = {
  "0x00000000009991e374a1628e3b2f60991bc26da4": "zChef",
  "0x000000000069aa14fb673a86952eb0785f38911c": "zICO",
};

import {
  type Address,
  type Hex,
  encodeAbiParameters,
  keccak256,
  concatHex,
  getAddress,
} from "viem";

const WRAPPED_ERC6909_ERC20_CREATION_CODE: Hex =
  "0x60c0604052610e43803803806100148161033a565b92833981016060828203126103365781516001600160401b038111610336578161003f91840161035f565b60208301519091906001600160401b0381116103365760409161006391850161035f565b92015160ff81168103610336573360a05260805281516001600160401b03811161024957600154600181811c9116801561032c575b602082101461022b57601f81116102c9575b50602092601f821160011461026857928192935f9261025d575b50508160011b915f199060031b1c1916176001555b80516001600160401b038111610249575f54600181811c9116801561023f575b602082101461022b57601f81116101c9575b50602091601f821160011461016b579181925f92610160575b50508160011b915f199060031b1c1916175f555b604051610a9290816103b182396080518161066b015260a051818181610222015261057a0152f35b015190505f80610124565b601f198216925f8052805f20915f5b8581106101b157508360019510610199575b505050811b015f55610138565b01515f1960f88460031b161c191690555f808061018c565b9192602060018192868501518155019401920161017a565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f830160051c81019160208410610221575b601f0160051c01905b818110610216575061010b565b5f8155600101610209565b9091508190610200565b634e487b7160e01b5f52602260045260245ffd5b90607f16906100f9565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100c4565b601f1982169360015f52805f20915f5b8681106102b15750836001959610610299575b505050811b016001556100d9565b01515f1960f88460031b161c191690555f808061028b565b91926020600181928685015181550194019201610278565b60015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f830160051c81019160208410610322575b601f0160051c01905b81811061031757506100aa565b5f815560010161030a565b9091508190610301565b90607f1690610098565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761024957604052565b81601f82011215610336578051906001600160401b0382116102495761038e601f8301601f191660200161033a565b928284526020838301011161033657815f9260208093018386015e830101529056fe60806040526004361015610011575f80fd5b5f3560e01c806306fdde031461088e578063095ea7b3146107eb57806318160ddd146107b057806323b872dd1461068f578063313ce5671461063457806340c10f191461052d57806370a08231146104ca57806395d89b41146102d55780639dc29fac146101d6578063a9059cbb146101225763dd62ed3e14610092575f80fd5b3461011e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576100c9610a09565b73ffffffffffffffffffffffffffffffffffffffff6100e6610a2c565b91165f52600460205273ffffffffffffffffffffffffffffffffffffffff60405f2091165f52602052602060405f2054604051908152f35b5f80fd5b3461011e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57610159610a09565b73ffffffffffffffffffffffffffffffffffffffff60243591335f52600360205260405f20610189848254610a4f565b90551690815f52600360205260405f208181540190556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a3602060405160018152f35b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57610208610a09565b60243573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036102ad577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602073ffffffffffffffffffffffffffffffffffffffff5f941692838552600382526040852061029a828254610a4f565b90558060025403600255604051908152a3005b7f82b42900000000000000000000000000000000000000000000000000000000005f5260045ffd5b3461011e575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576040515f600154908160011c600183169283156104c0575b60208210841461049357818552849390811561043357506001146103b9575b5003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019067ffffffffffffffff82118183101761038c576040829052819061038890826109c1565b0390f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60015f90815291507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b81831061041757505081016020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061033a565b60209193508060019154838588010152019101909183926103e3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660208581019190915291151560051b840190910191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0905061033a565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f169061031b565b3461011e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e5773ffffffffffffffffffffffffffffffffffffffff610516610a09565b165f526003602052602060405f2054604051908152f35b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e5761055f610a09565b6024359073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633036102ad5760025482810180911161060757602073ffffffffffffffffffffffffffffffffffffffff5f937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9360025516938484526003825260408420818154019055604051908152a3005b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b3461011e575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461011e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576106c6610a09565b6106ce610a2c565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602073ffffffffffffffffffffffffffffffffffffffff80604435951693845f526004835260405f208233165f5283527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405f205403610788575b845f526003835260405f20610761878254610a4f565b90551693845f526003825260405f20818154019055604051908152a3602060405160018152f35b845f526004835260405f208233165f52835260405f206107a9878254610a4f565b905561074b565b3461011e575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576020600254604051908152f35b3461011e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e57610822610a09565b73ffffffffffffffffffffffffffffffffffffffff60243591335f52600460205260405f208282165f526020528260405f205560405192835216907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461011e575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261011e576040515f5f54908160011c600183169283156109b7575b602082108414610493578185528493908115610433575060011461093f575003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01681019067ffffffffffffffff82118183101761038c576040829052819061038890826109c1565b5f80805291507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b81831061099b57505081016020017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061033a565b6020919350806001915483858801015201910190918392610967565b90607f16906108d3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361011e57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361011e57565b919082039182116106075756fea26469706673582212206fb723b5406c7f9a8dfa311c43b0a38325e2ed5dbfbece8aa76fa5436af96d8464736f6c634300081e0033"; // type(WrappedERC6909ERC20).creationCode
/** =============================================== */

/**
 * Computes the CREATE2 address the factory would deploy for the wrapped ERC6909 ERC20.
 * Mirrors:
 *   salt         = keccak256(abi.encode(erc6909, id))
 *   bytecodeHash = keccak256(abi.encodePacked(creationCode, abi.encode(n, s, d)))
 *   addr         = last20(keccak256(0xff ++ factory ++ salt ++ bytecodeHash))
 */
export function computeWrappedERC20Address(
  erc6909: Address,
  id: bigint | number,
): Address {
  const tokenId = typeof id === "bigint" ? id : BigInt(id);

  // abi.encode(erc6909, id)
  const salt = keccak256(
    encodeAbiParameters(
      [{ type: "address" }, { type: "uint256" }],
      [erc6909, tokenId],
    ),
  );

  const name = "Wrapped #" + id.toString();
  const symbol = "W" + id.toString();

  // abi.encode(n, s, d)
  const encodedCtorArgs = encodeAbiParameters(
    [{ type: "string" }, { type: "string" }, { type: "uint8" }],
    [name, symbol, 18],
  );

  // abi.encodePacked(creationCode, abi.encode(n, s, d))
  const initCodePacked = concatHex([
    WRAPPED_ERC6909_ERC20_CREATION_CODE,
    encodedCtorArgs,
  ]);

  const initCodeHash = keccak256(initCodePacked);

  // keccak256(0xff ++ factory ++ salt ++ initCodeHash)
  const digest = keccak256(
    concatHex([
      "0xff",
      WRAPPED_ERC6909_ERC20_CREATION_CODE,
      salt,
      initCodeHash,
    ]),
  );

  // last 20 bytes, EIP-55 checksummed
  const addr = getAddress(`0x${digest.slice(-40)}`);
  return addr;
}
