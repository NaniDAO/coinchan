/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SwapImport } from './routes/swap'
import { Route as SendImport } from './routes/send'
import { Route as OrdersImport } from './routes/orders'
import { Route as LaunchImport } from './routes/launch'
import { Route as LandingImport } from './routes/landing'
import { Route as ExploreImport } from './routes/explore'
import { Route as CoinpaperImport } from './routes/coinpaper'
import { Route as IndexImport } from './routes/index'
import { Route as UUserIdImport } from './routes/u.$userId'
import { Route as CCoinIdImport } from './routes/c.$coinId'

// Create/Update Routes

const SwapRoute = SwapImport.update({
  id: '/swap',
  path: '/swap',
  getParentRoute: () => rootRoute,
} as any)

const SendRoute = SendImport.update({
  id: '/send',
  path: '/send',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const LaunchRoute = LaunchImport.update({
  id: '/launch',
  path: '/launch',
  getParentRoute: () => rootRoute,
} as any)

const LandingRoute = LandingImport.update({
  id: '/landing',
  path: '/landing',
  getParentRoute: () => rootRoute,
} as any)

const ExploreRoute = ExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

const CoinpaperRoute = CoinpaperImport.update({
  id: '/coinpaper',
  path: '/coinpaper',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UUserIdRoute = UUserIdImport.update({
  id: '/u/$userId',
  path: '/u/$userId',
  getParentRoute: () => rootRoute,
} as any)

const CCoinIdRoute = CCoinIdImport.update({
  id: '/c/$coinId',
  path: '/c/$coinId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/coinpaper': {
      id: '/coinpaper'
      path: '/coinpaper'
      fullPath: '/coinpaper'
      preLoaderRoute: typeof CoinpaperImport
      parentRoute: typeof rootRoute
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreImport
      parentRoute: typeof rootRoute
    }
    '/landing': {
      id: '/landing'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingImport
      parentRoute: typeof rootRoute
    }
    '/launch': {
      id: '/launch'
      path: '/launch'
      fullPath: '/launch'
      preLoaderRoute: typeof LaunchImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/send': {
      id: '/send'
      path: '/send'
      fullPath: '/send'
      preLoaderRoute: typeof SendImport
      parentRoute: typeof rootRoute
    }
    '/swap': {
      id: '/swap'
      path: '/swap'
      fullPath: '/swap'
      preLoaderRoute: typeof SwapImport
      parentRoute: typeof rootRoute
    }
    '/c/$coinId': {
      id: '/c/$coinId'
      path: '/c/$coinId'
      fullPath: '/c/$coinId'
      preLoaderRoute: typeof CCoinIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$userId': {
      id: '/u/$userId'
      path: '/u/$userId'
      fullPath: '/u/$userId'
      preLoaderRoute: typeof UUserIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/coinpaper': typeof CoinpaperRoute
  '/explore': typeof ExploreRoute
  '/landing': typeof LandingRoute
  '/launch': typeof LaunchRoute
  '/orders': typeof OrdersRoute
  '/send': typeof SendRoute
  '/swap': typeof SwapRoute
  '/c/$coinId': typeof CCoinIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/coinpaper': typeof CoinpaperRoute
  '/explore': typeof ExploreRoute
  '/landing': typeof LandingRoute
  '/launch': typeof LaunchRoute
  '/orders': typeof OrdersRoute
  '/send': typeof SendRoute
  '/swap': typeof SwapRoute
  '/c/$coinId': typeof CCoinIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/coinpaper': typeof CoinpaperRoute
  '/explore': typeof ExploreRoute
  '/landing': typeof LandingRoute
  '/launch': typeof LaunchRoute
  '/orders': typeof OrdersRoute
  '/send': typeof SendRoute
  '/swap': typeof SwapRoute
  '/c/$coinId': typeof CCoinIdRoute
  '/u/$userId': typeof UUserIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/coinpaper'
    | '/explore'
    | '/landing'
    | '/launch'
    | '/orders'
    | '/send'
    | '/swap'
    | '/c/$coinId'
    | '/u/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/coinpaper'
    | '/explore'
    | '/landing'
    | '/launch'
    | '/orders'
    | '/send'
    | '/swap'
    | '/c/$coinId'
    | '/u/$userId'
  id:
    | '__root__'
    | '/'
    | '/coinpaper'
    | '/explore'
    | '/landing'
    | '/launch'
    | '/orders'
    | '/send'
    | '/swap'
    | '/c/$coinId'
    | '/u/$userId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CoinpaperRoute: typeof CoinpaperRoute
  ExploreRoute: typeof ExploreRoute
  LandingRoute: typeof LandingRoute
  LaunchRoute: typeof LaunchRoute
  OrdersRoute: typeof OrdersRoute
  SendRoute: typeof SendRoute
  SwapRoute: typeof SwapRoute
  CCoinIdRoute: typeof CCoinIdRoute
  UUserIdRoute: typeof UUserIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CoinpaperRoute: CoinpaperRoute,
  ExploreRoute: ExploreRoute,
  LandingRoute: LandingRoute,
  LaunchRoute: LaunchRoute,
  OrdersRoute: OrdersRoute,
  SendRoute: SendRoute,
  SwapRoute: SwapRoute,
  CCoinIdRoute: CCoinIdRoute,
  UUserIdRoute: UUserIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coinpaper",
        "/explore",
        "/landing",
        "/launch",
        "/orders",
        "/send",
        "/swap",
        "/c/$coinId",
        "/u/$userId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/coinpaper": {
      "filePath": "coinpaper.tsx"
    },
    "/explore": {
      "filePath": "explore.tsx"
    },
    "/landing": {
      "filePath": "landing.tsx"
    },
    "/launch": {
      "filePath": "launch.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/send": {
      "filePath": "send.tsx"
    },
    "/swap": {
      "filePath": "swap.tsx"
    },
    "/c/$coinId": {
      "filePath": "c.$coinId.tsx"
    },
    "/u/$userId": {
      "filePath": "u.$userId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
